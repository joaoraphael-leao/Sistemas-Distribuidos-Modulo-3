#!/usr/bin/env python3
"""
TESTE MANUAL - Chatbot Service (Porta 8082)
Cliente para testar o servi√ßo de Chatbot com IA Gemini
"""

import sys
import os
import grpc

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from grpc_services import services_pb2, services_pb2_grpc

def teste_chatbot():
    """Testa o servi√ßo de Chatbot"""
    
    print("=" * 60)
    print("TESTE MANUAL - CHATBOT SERVICE (Porta 8082)")
    print("=" * 60)
    
    # Conectar com o servi√ßo
    print("\nüîå Conectando com o servidor...")
    channel = grpc.insecure_channel('localhost:8082')
    stub = services_pb2_grpc.ChatbotServiceStub(channel)
    
    try:
        # 1. Verificar status
        print("\n1Ô∏è‚É£ VERIFICANDO STATUS DO CHATBOT...")
        print("-" * 40)
        resposta = stub.GetChatbotStatus(services_pb2.Empty(), timeout=5)
        print(f"   ‚úÖ Status: {resposta.message}")
        
        # 2. Fazer primeira pergunta
        print("\n2Ô∏è‚É£ FAZENDO PERGUNTA 1 AO CHATBOT...")
        print("-" * 40)
        request = services_pb2.ChatbotDuvidaRequest(
            aula_contexto="Sistemas Distribuidos com gRPC",
            duvida="Qual a diferenca entre gRPC e REST?"
        )
        print(f"   üì§ Enviando pergunta: '{request.duvida}'")
        print(f"   üìö Contexto: '{request.aula_contexto}'")
        print("   ‚è≥ Aguardando resposta da IA...")
        
        resposta = stub.ResolveDuvida(request, timeout=15)
        
        print(f"\n   üì• RESPOSTA RECEBIDA ({len(resposta.resposta)} caracteres):")
        print("   " + "-" * 56)
        print(f"{resposta.resposta}")
        print("   " + "-" * 56)
        
        # 3. Fazer segunda pergunta
        print("\n3Ô∏è‚É£ FAZENDO PERGUNTA 2 AO CHATBOT...")
        print("-" * 40)
        request = services_pb2.ChatbotDuvidaRequest(
            aula_contexto="Arquitetura de Microservicos",
            duvida="O que e um microservico?"
        )
        print(f"   üì§ Enviando pergunta: '{request.duvida}'")
        print(f"   üìö Contexto: '{request.aula_contexto}'")
        print("   ‚è≥ Aguardando resposta...")
        
        resposta = stub.ResolveDuvida(request, timeout=15)
        
        print(f"\n   üì• RESPOSTA RECEBIDA ({len(resposta.resposta)} caracteres):")
        print("   " + "-" * 56)
        # Mostrar apenas os primeiros 300 caracteres
        preview = resposta.resposta[:300]
        print(f"{preview}...")
        print("   " + "-" * 56)
        
        # 4. Fazer terceira pergunta (exemplo pr√°tico)
        print("\n4Ô∏è‚É£ FAZENDO PERGUNTA 3 AO CHATBOT...")
        print("-" * 40)
        request = services_pb2.ChatbotDuvidaRequest(
            aula_contexto="Protocol Buffers",
            duvida="Como funcionam os Protocol Buffers?"
        )
        print(f"   üì§ Enviando pergunta: '{request.duvida}'")
        print(f"   üìö Contexto: '{request.aula_contexto}'")
        print("   ‚è≥ Aguardando resposta...")
        
        resposta = stub.ResolveDuvida(request, timeout=15)
        
        print(f"\n   üì• RESPOSTA RECEBIDA ({len(resposta.resposta)} caracteres):")
        print("   " + "-" * 56)
        preview = resposta.resposta[:300]
        print(f"{preview}...")
        print("   " + "-" * 56)
        
        # Resumo
        print("\n" + "=" * 60)
        print("‚úÖ CHATBOT TESTADO COM SUCESSO!")
        print("=" * 60)
        print("\nüìä RESUMO DO TESTE:")
        print("   ‚úÖ Status verificado")
        print("   ‚úÖ 3 perguntas respondidas pela IA")
        print("   ‚úÖ Comunica√ß√£o gRPC funcionando")
        print("   ‚úÖ Servidor respondendo corretamente")
        print("\nüéØ Servi√ßo de Chatbot 100% operacional!\n")
        
    except grpc.RpcError as e:
        print(f"\n‚ùå ERRO gRPC: {e.code()} - {e.details()}")
        print("\nüí° DICA: Verifique se o servidor est√° rodando:")
        print("   python grpc_main_windows.py")
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
    finally:
        channel.close()
        print("üîå Conex√£o fechada.\n")

if __name__ == '__main__':
    teste_chatbot()
