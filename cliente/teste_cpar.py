#!/usr/bin/env python3
"""
TESTE MANUAL - CPAR Service (Porta 8083)
Cliente para testar o servi√ßo de Agendamentos CPAR
"""

import sys
import os
import grpc

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from grpc_services import services_pb2, services_pb2_grpc

def teste_cpar():
    """Testa o servi√ßo CPAR"""
    
    print("=" * 60)
    print("TESTE MANUAL - CPAR SERVICE (Porta 8083)")
    print("=" * 60)
    
    # Conectar com o servi√ßo
    print("\nüîå Conectando com o servidor...")
    channel = grpc.insecure_channel('localhost:8083')
    stub = services_pb2_grpc.CPARServiceStub(channel)
    
    try:
        # 1. Verificar status
        print("\n1Ô∏è‚É£ VERIFICANDO STATUS DO SERVICO CPAR...")
        print("-" * 40)
        resposta = stub.GetCPARStatus(services_pb2.Empty(), timeout=5)
        print(f"   ‚úÖ Status: {resposta.message}")
        
        # 2. Enviar primeira notifica√ß√£o
        print("\n2Ô∏è‚É£ ENVIANDO NOTIFICACAO DE AGENDAMENTO 1...")
        print("-" * 40)
        request = services_pb2.NotifyScheduleRequest(
            id_agendamento="agendamento_001"
        )
        print(f"   üì§ ID do Agendamento: {request.id_agendamento}")
        print("   ‚è≥ Enviando notifica√ß√£o...")
        
        resposta = stub.NotifySchedule(request, timeout=5)
        
        print(f"   üì• Resultado: {resposta.message}")
        
        # 3. Enviar segunda notifica√ß√£o
        print("\n3Ô∏è‚É£ ENVIANDO NOTIFICACAO DE AGENDAMENTO 2...")
        print("-" * 40)
        request = services_pb2.NotifyScheduleRequest(
            id_agendamento="agendamento_002"
        )
        print(f"   üì§ ID do Agendamento: {request.id_agendamento}")
        print("   ‚è≥ Enviando notifica√ß√£o...")
        
        resposta = stub.NotifySchedule(request, timeout=5)
        
        print(f"   üì• Resultado: {resposta.message}")
        
        # 4. Enviar terceira notifica√ß√£o
        print("\n4Ô∏è‚É£ ENVIANDO NOTIFICACAO DE AGENDAMENTO 3...")
        print("-" * 40)
        request = services_pb2.NotifyScheduleRequest(
            id_agendamento="agendamento_003"
        )
        print(f"   üì§ ID do Agendamento: {request.id_agendamento}")
        print("   ‚è≥ Enviando notifica√ß√£o...")
        
        resposta = stub.NotifySchedule(request, timeout=5)
        
        print(f"   üì• Resultado: {resposta.message}")
        
        # 5. Verificar status atualizado
        print("\n5Ô∏è‚É£ VERIFICANDO STATUS ATUALIZADO...")
        print("-" * 40)
        resposta = stub.GetCPARStatus(services_pb2.Empty(), timeout=5)
        print(f"   ‚úÖ Status: {resposta.message}")
        print("   ‚ÑπÔ∏è  (O servidor pode ter contadores internos atualizados)")
        
        # Resumo
        print("\n" + "=" * 60)
        print("‚úÖ CPAR TESTADO COM SUCESSO!")
        print("=" * 60)
        print("\nüìä RESUMO DO TESTE:")
        print("   ‚úÖ Status verificado")
        print("   ‚úÖ 3 notifica√ß√µes de agendamento enviadas")
        print("   ‚úÖ Todas as notifica√ß√µes processadas")
        print("   ‚úÖ Comunica√ß√£o gRPC funcionando")
        print("   ‚úÖ Servidor respondendo corretamente")
        print("\nüéØ Servi√ßo CPAR 100% operacional!\n")
        
    except grpc.RpcError as e:
        print(f"\n‚ùå ERRO gRPC: {e.code()} - {e.details()}")
        print("\nüí° DICA: Verifique se o servidor est√° rodando:")
        print("   python grpc_main_windows.py")
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
    finally:
        channel.close()
        print("üîå Conex√£o fechada.\n")

if __name__ == '__main__':
    teste_cpar()
