#!/usr/bin/env python3
"""
Sistema Distribu√≠do com gRPC - Execu√ß√£o Principal
Implementa√ß√£o otimizada sem redund√¢ncias
"""

import sys
import os
import subprocess
import time
import signal
from concurrent.futures import ThreadPoolExecutor

# Configura√ß√£o dos servi√ßos gRPC
GRPC_SERVICES = {
    'chatbot': {
        'script': 'grpc_services/chatbot_server.py',
        'port': 8082,
        'description': 'ü§ñ Chatbot com IA Gemini'
    },
    'cursos': {
        'script': 'grpc_services/cursos_server.py', 
        'port': 8081,
        'description': 'üìö Gest√£o de Cursos'
    },
    'cpar': {
        'script': 'grpc_services/cpar_server.py',
        'port': 8083, 
        'description': 'üìÖ Agendamentos CPAR'
    }
}

class GRPCSystemManager:
    """Gerenciador otimizado do sistema gRPC"""
    
    def __init__(self):
        self.processes = []
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handler otimizado para parada dos servi√ßos"""
        print("\nüõë Parando sistema gRPC...")
        self.stop_all_services()
        sys.exit(0)
    
    def start_service(self, service_name, service_config):
        """Inicia um servi√ßo espec√≠fico"""
        try:
            print(f"üöÄ Iniciando {service_config['description']}...")
            
            process = subprocess.Popen([
                sys.executable, service_config['script']
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes.append({
                'name': service_name,
                'process': process,
                'port': service_config['port']
            })
            
            # Verifica√ß√£o r√°pida de inicializa√ß√£o
            time.sleep(1)
            if process.poll() is None:
                print(f"‚úÖ {service_name.capitalize()} ativo na porta {service_config['port']}")
                return True
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå Falha ao iniciar {service_name}: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro em {service_name}: {e}")
            return False
    
    def start_all_services(self):
        """Inicia todos os servi√ßos de forma otimizada"""
        print("üèóÔ∏è  Iniciando Sistema Distribu√≠do gRPC")
        print("=" * 45)
        
        success_count = 0
        for service_name, service_config in GRPC_SERVICES.items():
            if self.start_service(service_name, service_config):
                success_count += 1
            time.sleep(0.5)  # Pausa m√≠nima entre inicializa√ß√µes
        
        print(f"\n‚ú® {success_count}/{len(GRPC_SERVICES)} servi√ßos ativos")
        
        if success_count > 0:
            print("\nüß™ Para testar:")
            print("   python grpc_services/test_client.py")
            print("\n‚èπÔ∏è  Pressione Ctrl+C para parar")
            
            # Loop principal otimizado
            try:
                while True:
                    time.sleep(2)
                    # Verifica√ß√£o r√°pida de sa√∫de dos processos
                    dead_processes = [p for p in self.processes if p['process'].poll() is not None]
                    if dead_processes:
                        for p in dead_processes:
                            print(f"‚ö†Ô∏è  Servi√ßo {p['name']} parou inesperadamente")
                        # Remove processos mortos da lista
                        self.processes = [p for p in self.processes if p['process'].poll() is None]
            except KeyboardInterrupt:
                self._signal_handler(signal.SIGINT, None)
        else:
            print("‚ùå Nenhum servi√ßo foi iniciado com sucesso")
    
    def stop_all_services(self):
        """Para todos os servi√ßos de forma otimizada"""
        for service_info in self.processes:
            try:
                service_info['process'].terminate()
                service_info['process'].wait(timeout=3)
                print(f"‚úÖ {service_info['name']} parado")
            except subprocess.TimeoutExpired:
                service_info['process'].kill()
                print(f"üî™ {service_info['name']} for√ßado a parar")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao parar {service_info['name']}: {e}")
    
    def run_single_service(self, service_name):
        """Executa um servi√ßo espec√≠fico"""
        if service_name not in GRPC_SERVICES:
            print(f"‚ùå Servi√ßo '{service_name}' n√£o encontrado")
            print(f"Dispon√≠veis: {', '.join(GRPC_SERVICES.keys())}")
            return
        
        service_config = GRPC_SERVICES[service_name]
        print(f"üöÄ Iniciando {service_config['description']}...")
        
        try:
            # Execu√ß√£o direta para um servi√ßo
            subprocess.run([sys.executable, service_config['script']])
        except KeyboardInterrupt:
            print(f"\nüõë {service_name} parado")

def main():
    """Fun√ß√£o principal otimizada"""
    manager = GRPCSystemManager()
    
    if len(sys.argv) > 1:
        # Execu√ß√£o de servi√ßo espec√≠fico
        service_name = sys.argv[1].lower()
        manager.run_single_service(service_name)
    else:
        # Execu√ß√£o de todos os servi√ßos
        manager.start_all_services()

if __name__ == '__main__':
    main()