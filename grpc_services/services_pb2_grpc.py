# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CursosServiceStub(object):
    """Serviços gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCursosStatus = channel.unary_unary(
                '/services.CursosService/GetCursosStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetUserCourses = channel.unary_unary(
                '/services.CursosService/GetUserCourses',
                request_serializer=services__pb2.GetUserCoursesRequest.SerializeToString,
                response_deserializer=services__pb2.GetUserCoursesResponse.FromString,
                _registered_method=True)
        self.GetCourseMedia = channel.unary_unary(
                '/services.CursosService/GetCourseMedia',
                request_serializer=services__pb2.GetCourseMediaRequest.SerializeToString,
                response_deserializer=services__pb2.GetCourseMediaResponse.FromString,
                _registered_method=True)
        self.AskQuestion = channel.unary_unary(
                '/services.CursosService/AskQuestion',
                request_serializer=services__pb2.AskQuestionRequest.SerializeToString,
                response_deserializer=services__pb2.AskQuestionResponse.FromString,
                _registered_method=True)
        self.SendNotification = channel.unary_unary(
                '/services.CursosService/SendNotification',
                request_serializer=services__pb2.SendNotificationRequest.SerializeToString,
                response_deserializer=services__pb2.SendNotificationResponse.FromString,
                _registered_method=True)


class CursosServiceServicer(object):
    """Serviços gRPC
    """

    def GetCursosStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserCourses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCourseMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CursosServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCursosStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCursosStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
            'GetUserCourses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserCourses,
                    request_deserializer=services__pb2.GetUserCoursesRequest.FromString,
                    response_serializer=services__pb2.GetUserCoursesResponse.SerializeToString,
            ),
            'GetCourseMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourseMedia,
                    request_deserializer=services__pb2.GetCourseMediaRequest.FromString,
                    response_serializer=services__pb2.GetCourseMediaResponse.SerializeToString,
            ),
            'AskQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.AskQuestion,
                    request_deserializer=services__pb2.AskQuestionRequest.FromString,
                    response_serializer=services__pb2.AskQuestionResponse.SerializeToString,
            ),
            'SendNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNotification,
                    request_deserializer=services__pb2.SendNotificationRequest.FromString,
                    response_serializer=services__pb2.SendNotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.CursosService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.CursosService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CursosService(object):
    """Serviços gRPC
    """

    @staticmethod
    def GetCursosStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CursosService/GetCursosStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserCourses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CursosService/GetUserCourses',
            services__pb2.GetUserCoursesRequest.SerializeToString,
            services__pb2.GetUserCoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCourseMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CursosService/GetCourseMedia',
            services__pb2.GetCourseMediaRequest.SerializeToString,
            services__pb2.GetCourseMediaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AskQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CursosService/AskQuestion',
            services__pb2.AskQuestionRequest.SerializeToString,
            services__pb2.AskQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CursosService/SendNotification',
            services__pb2.SendNotificationRequest.SerializeToString,
            services__pb2.SendNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChatbotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetChatbotStatus = channel.unary_unary(
                '/services.ChatbotService/GetChatbotStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ResolveDuvida = channel.unary_unary(
                '/services.ChatbotService/ResolveDuvida',
                request_serializer=services__pb2.ChatbotDuvidaRequest.SerializeToString,
                response_deserializer=services__pb2.ChatbotDuvidaResponse.FromString,
                _registered_method=True)
        self.RegisterMetrics = channel.unary_unary(
                '/services.ChatbotService/RegisterMetrics',
                request_serializer=services__pb2.RegisterMetricsRequest.SerializeToString,
                response_deserializer=services__pb2.RegisterMetricsResponse.FromString,
                _registered_method=True)


class ChatbotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetChatbotStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveDuvida(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatbotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetChatbotStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatbotStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
            'ResolveDuvida': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveDuvida,
                    request_deserializer=services__pb2.ChatbotDuvidaRequest.FromString,
                    response_serializer=services__pb2.ChatbotDuvidaResponse.SerializeToString,
            ),
            'RegisterMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterMetrics,
                    request_deserializer=services__pb2.RegisterMetricsRequest.FromString,
                    response_serializer=services__pb2.RegisterMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.ChatbotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.ChatbotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatbotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetChatbotStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.ChatbotService/GetChatbotStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveDuvida(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.ChatbotService/ResolveDuvida',
            services__pb2.ChatbotDuvidaRequest.SerializeToString,
            services__pb2.ChatbotDuvidaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.ChatbotService/RegisterMetrics',
            services__pb2.RegisterMetricsRequest.SerializeToString,
            services__pb2.RegisterMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CPARServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCPARStatus = channel.unary_unary(
                '/services.CPARService/GetCPARStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.NotifySchedule = channel.unary_unary(
                '/services.CPARService/NotifySchedule',
                request_serializer=services__pb2.NotifyScheduleRequest.SerializeToString,
                response_deserializer=services__pb2.NotifyScheduleResponse.FromString,
                _registered_method=True)


class CPARServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCPARStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifySchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CPARServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCPARStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCPARStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
            'NotifySchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifySchedule,
                    request_deserializer=services__pb2.NotifyScheduleRequest.FromString,
                    response_serializer=services__pb2.NotifyScheduleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.CPARService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.CPARService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CPARService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCPARStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CPARService/GetCPARStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifySchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.CPARService/NotifySchedule',
            services__pb2.NotifyScheduleRequest.SerializeToString,
            services__pb2.NotifyScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NotificacoesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNotificacoesStatus = channel.unary_unary(
                '/services.NotificacoesService/GetNotificacoesStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)


class NotificacoesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetNotificacoesStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificacoesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNotificacoesStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNotificacoesStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.NotificacoesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.NotificacoesService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NotificacoesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetNotificacoesStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.NotificacoesService/GetNotificacoesStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class InsightsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInsightsStatus = channel.unary_unary(
                '/services.InsightsService/GetInsightsStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)


class InsightsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInsightsStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InsightsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInsightsStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInsightsStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.InsightsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.InsightsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InsightsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInsightsStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.InsightsService/GetInsightsStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IdentidadeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIdentidadeStatus = channel.unary_unary(
                '/services.IdentidadeService/GetIdentidadeStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)


class IdentidadeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetIdentidadeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentidadeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIdentidadeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIdentidadeStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.IdentidadeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.IdentidadeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IdentidadeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetIdentidadeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.IdentidadeService/GetIdentidadeStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PagamentosServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPagamentosStatus = channel.unary_unary(
                '/services.PagamentosService/GetPagamentosStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)


class PagamentosServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPagamentosStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PagamentosServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPagamentosStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPagamentosStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.PagamentosService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.PagamentosService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PagamentosService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPagamentosStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.PagamentosService/GetPagamentosStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MidiaConteudoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMidiaStatus = channel.unary_unary(
                '/services.MidiaConteudoService/GetMidiaStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetMedia = channel.unary_unary(
                '/services.MidiaConteudoService/GetMedia',
                request_serializer=services__pb2.GetCourseMediaRequest.SerializeToString,
                response_deserializer=services__pb2.GetCourseMediaResponse.FromString,
                _registered_method=True)


class MidiaConteudoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMidiaStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MidiaConteudoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMidiaStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMidiaStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.StatusResponse.SerializeToString,
            ),
            'GetMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMedia,
                    request_deserializer=services__pb2.GetCourseMediaRequest.FromString,
                    response_serializer=services__pb2.GetCourseMediaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.MidiaConteudoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.MidiaConteudoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MidiaConteudoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMidiaStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.MidiaConteudoService/GetMidiaStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.MidiaConteudoService/GetMedia',
            services__pb2.GetCourseMediaRequest.SerializeToString,
            services__pb2.GetCourseMediaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
