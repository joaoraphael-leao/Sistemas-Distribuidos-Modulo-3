#!/usr/bin/env python3
"""
Cursos Service - gRPC Server
Gest√£o de cursos, inscri√ß√µes e notifica√ß√µes
"""

import sys
import os
import grpc
from concurrent import futures
import time

# Configura√ß√£o de ambiente
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Imports gRPC
from grpc_services import services_pb2, services_pb2_grpc

class CursosServiceServicer(services_pb2_grpc.CursosServiceServicer):
    """Implementa√ß√£o otimizada do servi√ßo de Cursos"""
    
    def GetCursosStatus(self, request, context):
        """Status do servi√ßo"""
        return services_pb2.StatusResponse(
            message="üìö Cursos Service ativo - Gest√£o de cursos e inscri√ß√µes"
        )
    
    def GetUserCourses(self, request, context):
        """Lista cursos do usu√°rio"""
        try:
            # Simula√ß√£o otimizada de cursos
            courses = [
                services_pb2.Course(id=1, nome="Python Fundamentals"),
                services_pb2.Course(id=2, nome="Data Science B√°sico"),
                services_pb2.Course(id=3, nome="Machine Learning Intro")
            ]
            
            return services_pb2.GetUserCoursesResponse(
                message=f"üìö Cursos encontrados para usu√°rio {request.id_usuario}",
                cursos_inscritos=courses
            )
        except Exception as e:
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f'Erro ao buscar cursos: {str(e)}')
            return services_pb2.GetUserCoursesResponse()
    
    def GetCourseMedia(self, request, context):
        """Busca m√≠dia de um curso"""
        try:
            # Simula√ß√£o de integra√ß√£o com servi√ßo de m√≠dia
            media_content = f"üì∫ Conte√∫do multim√≠dia do curso {request.id_curso}: v√≠deos, slides, exerc√≠cios pr√°ticos"
            
            return services_pb2.GetCourseMediaResponse(
                midia_curso=media_content
            )
        except Exception as e:
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f'Erro ao buscar m√≠dia: {str(e)}')
            return services_pb2.GetCourseMediaResponse()
    
    def AskQuestion(self, request, context):
        """Integra√ß√£o com chatbot para d√∫vidas"""
        try:
            # Em um sistema real, faria chamada gRPC para o chatbot
            # Aqui simularemos a resposta
            resposta_simulada = f"""ü§ñ Processando d√∫vida sobre o curso {request.id_curso}:

Contexto: {request.aula_contexto}
Pergunta: {request.duvida}

üí° Esta funcionalidade integra com o Chatbot Service para respostas inteligentes.
Em produ√ß√£o, seria feita uma chamada gRPC para o servi√ßo de Chatbot."""

            return services_pb2.AskQuestionResponse(
                resposta=resposta_simulada
            )
        except Exception as e:
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f'Erro ao processar d√∫vida: {str(e)}')
            return services_pb2.AskQuestionResponse()
    
    def SendNotification(self, request, context):
        """Envio de notifica√ß√µes"""
        try:
            # Simula√ß√£o de integra√ß√£o com servi√ßo de notifica√ß√µes
            notificacao_response = services_pb2.StatusResponse(
                message="üì± Notifica√ß√£o enviada com sucesso"
            )
            
            return services_pb2.SendNotificationResponse(
                message=f"üìö Notifica√ß√£o de curso enviada para usu√°rio {request.id_usuario}",
                notificacao_servico=notificacao_response
            )
        except Exception as e:
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f'Erro ao enviar notifica√ß√£o: {str(e)}')
            return services_pb2.SendNotificationResponse()

def serve():
    """Inicia o servidor gRPC otimizado"""
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    services_pb2_grpc.add_CursosServiceServicer_to_server(CursosServiceServicer(), server)
    
    listen_addr = 'localhost:8081'
    server.add_insecure_port(listen_addr)
    
    print("Cursos Service iniciando na porta 8081...")
    print("Integrado com: Chatbot, Notifica√ß√µes, M√≠dia")
    
    server.start()
    
    try:
        while True:
            time.sleep(86400)
    except KeyboardInterrupt:
        print("\nParando Cursos Service...")
        server.stop(0)

if __name__ == '__main__':
    serve()